---
title: "What It Takes To Win: Cricket - T20"
author: "Jacquie Tran"
format:
  revealjs:
    theme: [night, custom.scss]
---

## Introduction

- Cricket will be added to the Olympic program for LA 2028. The format is expected to be T20.
- The Australian Women's cricket team has long been among the most successful international sides in world cricket.
- With the professionalisation of women's cricket growing globally, more nations are challenging the Australian Women's team in major events **(see: T20 World Cup 2024, won by New Zealand)**

## Bottom Line Up Front

From a scoping analysis of team and game data, these factors appear related to winning in Women's T20 cricket (specifically in World Cup tournament play):

- Point 1
- Point 2
- Point 3

## Only a slice of "What It Takes To Win"

This quantitative analysis uses publicly available competition and game data only

Other factors are critical to performance but not reflected in public data, and would benefit from mixed methods analysis, for example:

- Daily training measures
- Measures of training state and performance: Physiological, biomechanical, physical, psychological
- "Tight team": Trusted relationships between athletes, coaches, and support team

## Higher-level principles of team sports performance

**International experience** ([KalÃ©n, et al. 2017](https://doi.org/10.1080/24748668.2017.1405610))

**Scoring power**

> *"Batting performance characteristics appear to be more important than bowling characteristics, which is even more pronounced in women's T20 cricket."* ([Bhardwaj & Dwyer, 2022](https://doi.org/10.1080/24748668.2022.2045820))

**"Tempo":** As in chess; increasing pressure by threatening finite resources (dot balls and wickets)

## Methods

- This presentation will focus on Women's T20 World Cups and Commonwealth Games from 2018 to 2024 (the extent of available ball-by-ball data)
- Data obtained from [Cricsheet.org](https://cricsheet.org) and [ESPNCricinfo](https://www.espncricinfo.com) using the `{cricketdata}` R package

## Retrieve data

```{r retrieve_data, cache = TRUE}

# First, obtain match IDs for Women's T20 World Cup tournaments or Comm Games
t20wc_match_ids <- cricketdata::fetch_cricsheet(
  type = "match",
  gender = "female",
  competition = "t20s") |>
  # Filter to World Cup matches
  dplyr::filter(
    event %in% c(
      "ICC Women's T20 World Cup",
      "Commonwealth Games Women's Cricket Competition"))

# Retrieve playing XI lists, filter to T20 World Cup or Comm Games matches only
t20wc_team_lists <- cricketdata::fetch_cricsheet(
  type = "player",
  gender = "female",
  competition = "t20s") |>
  # Filter to World Cup matches
  dplyr::filter(
    match_id %in% t20wc_match_ids$match_id)

# Retrieve ball-by-ball data, filter to T20 World Cup or Comm Games matches only
t20wc_bbb <- cricketdata::fetch_cricsheet(
  type = "bbb",
  gender = "female",
  competition = "t20s") |>
  # Filter to World Cup matches
  dplyr::filter(
    match_id %in% t20wc_match_ids$match_id)

```

```{r retrieve_team_lists_with_espncricinfo_id, eval = FALSE}

# Run once to retrieve data initially, then saved to CSV

# Tidy team lists to isolate unique player records and handle name variations
t20wc_team_lists_unique <- t20wc_team_lists |>
  dplyr::select(-match_id) |>
  dplyr::group_by(team, player) |>
  dplyr::distinct(player, .keep_all = TRUE) |>
  dplyr::arrange(team, player) |>
  dplyr::mutate(
    player_tidy = dplyr::case_when(
      # Name change
      player %in% c(
        "KH Brunt", "KH Sciver-Brunt")  ~ "KH Sciver-Brunt",
      # Name change
      player %in% c(
        "NR Sciver", "NR Sciver-Brunt") ~ "NR Sciver-Brunt",
      # Match to ESPNCricinfo format of name
      player == "AC Jayangani"          ~ "C Athapaththu",
      player == "U Thimashini"          ~ "U Thimeshani",
      player == "Sidra Ameen"           ~ "Sidra Amin",
      player == "Umaima Sohail"         ~ "Omaima Sohail",
      player == "N Chantam"             ~ "N Chantham",
      TRUE                              ~ player))

# Match names to ESPNCricinfo IDs
team_lists_matching <- t20wc_team_lists_unique |>
  dplyr::mutate(
    # Use convenience function to search for player IDs
    espncricinfo_id = paste(
      cricketdata::find_player_id(player_tidy)$ID, collapse = " "))
    
# Tidy up cases where the convenience function did not return the correct ID
team_lists_with_espncricinfo_id <- team_lists_matching |>
  dplyr::mutate(
    espncricinfo_id = dplyr::case_when(
      
      team == "Australia" &
        player_tidy == "A King"          ~ "944393",
      team == "Australia" &
        player_tidy == "A Sutherland"    ~ "1071705",
      team == "Australia" &
        player_tidy == "D Brown"         ~ "388845",
      team == "Australia" &
        player_tidy == "ML Schutt"       ~ "420314",
      
      team == "Barbados" &
        player_tidy == "A Williams"      ~ "1325401",
      team == "Barbados" &
        player_tidy == "S Carrington"    ~ "1325395",
      
      team == "England" &
        player_tidy == "KH Sciver-Brunt" ~ "53906",
      team == "England" &
        player_tidy == "NR Sciver-Brunt" ~ "515905",
      
      team == "India" &
        player_tidy == "A Reddy"         ~ "960867",
      team == "India" &
        player_tidy == "M Joshi"         ~ "960815",
      team == "India" &
        player_tidy == "M Raj"           ~ "54273",
      team == "India" &
        player_tidy == "S Asha"          ~ "550687",
      team == "India" &
        player_tidy == "S Pandey"        ~ "442145",
      team == "India" &
        player_tidy == "S Rana"          ~ "556537",
      team == "India" &
        player_tidy == "SR Patil"        ~ "1289948",
      team == "India" &
        player_tidy == "T Bhatia"        ~ "883423",
      
      team == "Ireland" &
        player_tidy == "A Hunter"        ~ "1229014",
      team == "Ireland" &
        player_tidy == "AN Kelly"        ~ "592593",
      
      team == "Pakistan" &
        player_tidy == "Sidra Ameen"     ~ "362356",
      team == "Pakistan" &
        player_tidy == "Umaima Sohail"   ~ "941777",
      
      team == "Scotland" &
        player_tidy == "A Lister"        ~ "1184173",
      team == "Scotland" &
        player_tidy == "AH Maqsood"      ~ "934494",
      team == "Scotland" &
        player_tidy == "L Jack"          ~ "416024",
      team == "Scotland" &
        player_tidy == "PA Chatterji"    ~ "526987",
      team == "Scotland" &
        player_tidy == "R Slater"        ~ "1184969",
      
      team == "South Africa" &
        player_tidy == "D Tucker"        ~ "939253",
      team == "South Africa" &
        player_tidy == "L Lee"           ~ "483484",
      team == "South Africa" &
        player_tidy == "Z Mali"          ~ "593963",
      
      team == "Sri Lanka" &
        player_tidy == "C Athapaththu"   ~ "318853",
      team == "Sri Lanka" &
        player_tidy == "H Karunaratne"   ~ "631722",
      team == "Sri Lanka" &
        player_tidy == "NND de Silva"    ~ "557764",
      
      team == "West Indies" &
        player_tidy == "A Mohammed"      ~ "55187",
      team == "West Indies" &
        player_tidy == "B Cooper"        ~ "424629",
      team == "West Indies" &
        player_tidy == "SR Taylor"       ~ "355359",
      team == "West Indies" &
        player_tidy == "Z James"         ~ "1268281",
      
      TRUE ~ espncricinfo_id))

# Save output to CSV - the convenience function is useful but run time is long
write.csv(
  team_lists_with_espncricinfo_id,
  file = here::here("data/team_lists_with_espncricinfo_id.csv"),
  row.names = FALSE)

```

```{r read_team_lists_with_espncricinfo_id}

# Retrieved data called from a static file for efficiency's sake
# Read in CSV with player names and ESPNCricinfo IDs
team_lists_with_espncricinfo_id <- readr::read_csv(
  file = here::here("data/team_lists_with_espncricinfo_id.csv"),
  show_col_types = FALSE)

```

```{r retrieve_player_match_history, eval = FALSE}

# Run once to retrieve data initially, then saved to CSV

get_match_history <- function(ref_data){
  
  # Requires {purrr}, {dplyr}, {cricketdata}
  
  # Store ESPNCricinfo IDs, excluding players that have only bowled
  id_vec_batting <- ref_data |>
    dplyr::select(espncricinfo_id) |>
    dplyr::pull()
  
  # Retrieve batting data
  purrr::map_df(id_vec_batting, function(i) {
      
      # Simple but effective progress indicator
      cat(".")
      
      # Retrieve player data from ESPNCricinfo
      df <- cricketdata::fetch_player_data(i, "T20", "batting") |>
        # Add column to include the player's ESPNCricinfo ID
        dplyr::mutate(espncricinfo_id = i) |>
        # Keep only the columns useful for this analysis
        dplyr::select(espncricinfo_id, Date, Opposition)
      
    }) -> match_history
  
  return(match_history)
    
}

# Retrieve T20I stats
match_histories <- get_match_history(team_lists_with_espncricinfo_id)

# Save output to CSV - the run time is long for recursive retrieval on a long
# list of players
write.csv(
  match_histories,
  file = here::here("data/match_histories.csv"),
  row.names = FALSE)

```

```{r read_player_match_histories}

# Retrieved data called from a static file for efficiency's sake
match_histories <- readr::read_csv(
  file = here::here("data/match_histories.csv"),
  show_col_types = FALSE)

```

```{r wrangle_match_histories_tidy}

# Merge match histories data and team lists metadata

# First, reduce team lists data frame to handle duplicates that are included
# to account for name changes (e.g., Katherine and Nat Sciver-Brunt)
team_lists_reduced <- team_lists_with_espncricinfo_id |>
  dplyr::filter(
    !player %in% c("KH Brunt", "NR Sciver"))

# Merge match histories with reduced team list
match_histories_with_team_list <- dplyr::left_join(
  match_histories, team_lists_reduced)

# Create duplicate records for KH Sciver-Brunt and NR Sciver-Brunt, to
# enable matching to T20WC match stats from Cricsheet

# JT stopped here: Need to resolve unexpected many-to-many relationships
# in order to proceed

```


```{r tidy_cricsheet_data}

# Tidy match IDs data frame
t20wc_match_ids_tidy <- t20wc_match_ids |>
  dplyr::mutate(
    match_id = as.numeric(match_id)) |>
  dplyr::select(
    match_id, event, winner, winner_runs, winner_wickets)

# Merge data frames together and tidy ball-by-ball data
t20wc_bbb_tidy <- dplyr::left_join(
  t20wc_bbb, t20wc_match_ids_tidy, by = "match_id") |>
  dplyr::mutate(
    year = stringr::str_sub(start_date, start = 1, end = 4)) |>
  dplyr::select(
    match_id, season, year, event, start_date, dplyr::starts_with("winner"),
    innings, over, ball, dplyr::ends_with("_team"), dplyr::contains("striker"),
    bowler, runs_off_bat, extras, ball_in_over, extra_ball, balls_remaining,
    runs_scored_yet, wicket, wickets_lost_yet, dplyr::ends_with("_total"),
    wides, noballs, byes, legbyes, penalty, wicket_type, player_dismissed,
    other_wicket_type, other_player_dismissed)

```

# What does winning look like?

High-level performance outcomes


# International experience

At tournament start
Relative experience (team vs. team)

```{r}

```


# Batting performance

Progression of standard metrics over multiple tournaments

## Innings totals over time

```{r wrangle_innings_totals}

innings_totals <- t20wc_bbb_tidy |>
  dplyr::select(
    match_id, year, winner, innings, batting_team, runs_scored_yet) |>
  dplyr::group_by(
    match_id, year, winner, innings, batting_team) |>
  dplyr::summarise(
    innings_total = max(runs_scored_yet),
    .groups = "drop") |>
  dplyr::mutate(
    result_for_batting_team = dplyr::case_when(
      winner == batting_team ~ 1,
      TRUE                   ~ 0)) |>
  # Filter out matches with no result
  dplyr::filter(match_id != 1173066) |>
  dplyr::mutate(
    innings_label = dplyr::case_when(
      innings == 1 ~ "Setting",
      innings == 2 ~ "Chasing"),
    result_label = dplyr::case_when(
      result_for_batting_team == 1 ~ "Win",
      result_for_batting_team == 0 ~ "Loss"),
    innings_label = factor(
      innings_label,
      levels = c("Setting", "Chasing")),
    result_label = factor(
      result_label,
      levels = c("Win", "Loss"))
    )

```

- Sample: `r length(innings_totals$match_id)` matches from `r length(unique(t20wc_bbb_tidy$year))` tournaments
- 1 match excluded due to no result (rained out)

```{r analyse_innings_totals}

# Calculate median winning and losing innings totals,
# when chasing and setting
innings_total_summary <- innings_totals |>
  dplyr::group_by(
    year, innings_label, result_label) |>
  dplyr::summarise(
    innings_total_median = median(innings_total),
    .groups = "drop"
  )

```

```{r plot_innings_totals_over_time}

# Build plot
plot_innings_totals_over_time <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = innings_totals,
    ggplot2::aes(
      x = year, y = innings_total)) +
  ggplot2::facet_grid(
    innings_label ~ result_label)

# Display plot
plot_innings_totals_over_time

```

## Innings totals - pooled across tournaments

```{r plot_innings_totals_pooled, message = FALSE}

ggplot2::ggplot() +
  ggplot2::geom_violin(
    data = innings_totals,
    ggplot2::aes(
      x = innings_total, y = result_for_batting_team,
      group = result_for_batting_team)) +
  ggbeeswarm::geom_quasirandom(
    data = innings_totals,
    ggplot2::aes(
      x = innings_total, y = result_for_batting_team,
      group = result_for_batting_team),
    groupOnX = FALSE, varwidth = TRUE,
    method = "pseudorandom", cex = 2.5) +
  ggplot2::facet_wrap(~innings_label)

```
 
- Wide variability in totals when setting, but ~150 runs seems important.
 - No discernible difference in chasing totals between winning and losing teams (To be expected - because the winning target is set by the team that bats first)
 
## Setting a total above / below 150
 
```{r analyse_innings_above_below_150}

# Focus on setting innings only
innings_above_below_150 <- innings_totals |>
  dplyr::filter(innings == 1) |>
  dplyr::mutate(
    flag_above_below_150 = dplyr::case_when(
      innings_total >= 150 ~ "150+ runs",
      innings_total < 150  ~ "< 150 runs")) |>
  dplyr::group_by(
    result_label, flag_above_below_150) |>
  dplyr::summarise(
    n_innings = dplyr::n(),
    .groups = "drop")

```

```{r plot_innings_above_below_150, message = FALSE}

# Build plot
plot_innings_above_below_150 <- ggplot2::ggplot() +
  ggbeeswarm::geom_quasirandom(
    data = innings_totals |>
      dplyr::filter(innings_label == "Setting"),
    ggplot2::aes(
      x = innings_total, y = result_for_batting_team,
      group = result_for_batting_team, colour = innings_total >= 150),
    groupOnX = FALSE, varwidth = TRUE,
    method = "pseudorandom", cex = 2.5)

# Display plot
plot_innings_above_below_150

```


The team batting first has won:

- 97% of matches when setting a target of 150 or above
- 37% of matches when setting a target below 150

## Capability to score 150+

Number of innings per tournament with scores of 150+ (setting or chasing)

```{r wrangle_freq_innings_above_150}

freq_innings_above_150 <- innings_totals |>
  dplyr::mutate(
    flag_above_below_150 = dplyr::case_when(
      innings_total >= 150 ~ "150+ runs",
      innings_total < 150  ~ "< 150 runs")) |>
  dplyr::group_by(year, flag_above_below_150) |>
  dplyr::summarise(
    n_innings = dplyr::n(),
    .groups = "drop") |>
  dplyr::group_by(year) |>
  dplyr::mutate(
    n_innings_in_tournament = sum(n_innings),
    pct_of_innings_in_tournament = round(
      n_innings / n_innings_in_tournament * 100, 0)) |>
  dplyr::filter(flag_above_below_150 == "150+ runs")

```

```{r plot_freq_innings_above_150}

# Build plot
plot_freq_innings_above_150 <- ggplot2::ggplot() +
  ggplot2::geom_bar(
    data = freq_innings_above_150,
    ggplot2::aes(
      x = year, y = pct_of_innings_in_tournament),
    stat = "identity")

# Display plot
plot_freq_innings_above_150

```

## Boundary scoring rate

Note: Cricsheet data does not flag boundary-scoring balls, as such. For this analysis, I am working under the assumption that "runs off bat" of 4 or 6 are boundaries. It is technically possible to run 4 or 6 runs off one ball (say, with overthrows), but these are rare occurrences.

```{r wrangle_boundary_scoring}

# First, identify teams that played in 3+ tournaments
teams_in_3_plus_tournaments <- t20wc_match_ids |>
  dplyr::select(
    date, team1, team2) |>
  dplyr::mutate(
    year = stringr::str_sub(date, start = 1, end = 4)) |>
  dplyr::select(
    year, team1, team2) |>
  tidyr::pivot_longer(
    cols = c("team1", "team2"),
    names_to = "key",
    values_to = "value") |>
  dplyr::select(-key) |>
  dplyr::group_by(year) |>
  dplyr::distinct(value, .keep_all = TRUE) |>
  dplyr::ungroup() |>
  dplyr::group_by(value) |>
  dplyr::summarise(
    n_tournaments = dplyr::n(),
    .groups = "drop") |>
  dplyr::filter(n_tournaments >= 3)

# Filter ball-by-ball to boundary-scoring balls
boundary_scoring <- t20wc_bbb_tidy |>
  dplyr::filter(runs_off_bat %in% c(4, 6)) |>
  # Filter to teams that played in 3+ tournaments
  dplyr::filter(batting_team %in% teams_in_3_plus_tournaments$value)

```

Compare teams that competed in at least 3 tournaments

- Runs scored from boundaries
- % of innings total from boundaries
- Batting impact players

## Teams ranked on tournament performance

Rank on number of matches won, then win percentage

```{r wrangle_team_rankings}

team_rankings <- t20wc_match_ids |>
  dplyr::select(
    match_id, team1, team2, winner) |>
  tidyr::pivot_longer(
    cols = c("team1", "team2"),
    names_to = "key",
    values_to = "team") |>
  dplyr::mutate(
    result = dplyr::case_when(
      is.na(winner)  ~ "no_result",
      winner == team ~ "win",
      winner != team ~ "loss")) |>
  # Filter to teams in 3+ tournaments
  dplyr::filter(
    team %in% teams_in_3_plus_tournaments$value) |>
  dplyr::select(
    match_id, team, result) |>
  dplyr::group_by(team, result) |>
  dplyr::summarise(
    n_matches = dplyr::n(),
    .groups = "drop") |>
  tidyr::pivot_wider(
    id_cols = "team",
    names_from = "result",
    values_from = "n_matches",
    values_fill = 0) |>
  dplyr::mutate(
    matches_total = win + loss + no_result,
    win_pct = round(win / matches_total * 100, 1)) |>
  dplyr::arrange(
    desc(win), desc(win_pct)) |>
  dplyr::select(
    team, win, loss, no_result, matches_total, win_pct)

```

```{r tabulate_team_rankings}

team_rankings |>
  gt::gt()

```


## Boundary scoring: Runs scored

```{r wrangle_boundary_scoring_runs}

boundary_scoring_runs <- boundary_scoring |>
  dplyr::select(
    match_id, year, winner, innings, batting_team, dplyr::ends_with("_total"), 
    striker, runs_off_bat) |>
  dplyr::mutate(
    innings_total = dplyr::case_when(
      innings == 1 ~ innings1_total,
      innings == 2 ~ innings2_total),
    innings_label = dplyr::case_when(
      innings == 1 ~ "Setting",
      innings == 2 ~ "Chasing"),
    result_for_batting_team = dplyr::case_when(
      winner == batting_team ~ 1,
      TRUE                   ~ 0),
    innings_label = factor(
      innings_label,
      levels = c("Setting", "Chasing")),
    result_label = dplyr::case_when(
      result_for_batting_team == 1 ~ "Win",
      result_for_batting_team == 0 ~ "Loss"),
    result_label = factor(
      result_label, levels = c("Loss", "Win")),
    batting_team = factor(
      batting_team,
      levels = c("Australia",
                 "England",
                 "India",
                 "New Zealand",
                 "South Africa",
                 "West Indies",
                 "Sri Lanka",
                 "Pakistan",
                 "Bangladesh"))) |>
  dplyr::group_by(
    match_id, year, batting_team, result_label, innings_label, innings_total) |>
  dplyr::summarise(
    count_boundaries = length(runs_off_bat),
    runs_from_boundaries = sum(runs_off_bat),
    .groups = "drop") |>
  dplyr::mutate(
    pct_of_innings_total = round(
      runs_from_boundaries / innings_total * 100, 0)
  )

```

```{r plot_boundary_scoring_runs}

# Build plot
plot_boundary_scoring_runs <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = boundary_scoring_runs,
    ggplot2::aes(
      x = runs_from_boundaries, y = result_label)) +
  ggplot2::facet_wrap(~batting_team)

# Display plot
plot_boundary_scoring_runs

```

## Boundary scoring: Runs scored as % of innings total

```{r plot_boundary_scoring_pct_of_innings}

# Build plot
plot_boundary_scoring_pct_of_innings <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = boundary_scoring_runs,
    ggplot2::aes(
      x = pct_of_innings_total, y = result_label)) +
  ggplot2::facet_wrap(~batting_team)

# Display plot
plot_boundary_scoring_pct_of_innings

```

## Batting impact players: # of boundaries

- Boundary balls as a % of balls faced
- Minimum 5 innings
- Minimum 30 balls faced (5 overs total)

```{r wrangle_batting_impact_players}

# Identify batters that meet the exclusion criteria
batting_impact_to_include <- boundary_scoring |>
  # Account for name changes
  dplyr::mutate(
    striker_tidy = dplyr::case_when(
      striker %in% c(
        "KH Brunt", "KH Sciver-Brunt")  ~ "KH Sciver-Brunt",
      striker %in% c(
        "NR Sciver", "NR Sciver-Brunt") ~ "NR Sciver-Brunt",
      TRUE                              ~ striker)) |>
  dplyr::group_by(striker_tidy) |>
  dplyr::mutate(
    n_innings = length(unique(match_id)),
    n_balls_faced = length(match_id)) |>
  dplyr::ungroup() |>
  dplyr::distinct(striker, .keep_all = TRUE) |>
  # Apply exclusion criteria
  dplyr::filter(
    n_innings >= 5 & n_balls_faced >= 30) |>
  dplyr::select(
    batting_team, striker, n_innings, n_balls_faced)

# Identify impact players with the bat
batting_impact_players <- boundary_scoring |>
  # Keep records for players that meet the inclusion criteria
  dplyr::filter(striker %in% batting_impact_to_include$striker) |>
  # Tidy up striker names
  dplyr::mutate(
    striker_tidy = dplyr::case_when(
      striker == "NR Sciver"    ~ "NR Sciver-Brunt",
      striker == "AC Jayangani" ~ "C Athapaththu",
      TRUE                      ~ striker)) |>
  dplyr::group_by(match_id, batting_team, striker_tidy) |>
  dplyr::summarise(
    n_boundaries = length(runs_off_bat),
    runs_from_boundaries = sum(runs_off_bat),
    .groups = "drop")

```

```{r plot_batting_impact_n_boundaries}

# Build plot
plot_batting_n_boundaries <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = batting_impact_players,
    ggplot2::aes(
      x = n_boundaries, y = striker_tidy)) +
  ggplot2::facet_wrap(~batting_team, scales = "free_y")

# Display plot
plot_batting_n_boundaries

```

## Batting impact players: Runs from boundaries

```{r plot_batting_impact_runs_from_boundaries}

# Build plot
plot_batting_runs_from_boundaries <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = batting_impact_players,
    ggplot2::aes(
      x = runs_from_boundaries, y = striker_tidy)) +
  ggplot2::facet_wrap(~batting_team, scales = "free_y")

# Display plot
plot_batting_runs_from_boundaries

```

## Building scoreboard pressure

Turning over the strike - balls scored from as % of balls faced (excluding extras)

```{r wrangle_turning_over_strike}

turning_over_strike <- t20wc_bbb_tidy |>
  # Filter to teams that played in 3+ tournaments
  dplyr::filter(batting_team %in% teams_in_3_plus_tournaments$value) |>
  dplyr::mutate(
    flag_runs_off_bat = dplyr::case_when(
      runs_off_bat > 0 ~ 1,
      TRUE             ~ 0)) |>
  dplyr::group_by(year, match_id, batting_team) |>
  dplyr::summarise(
    balls_scored_from = sum(flag_runs_off_bat),
    balls_faced = length(match_id),
    .groups = "drop") |>
  dplyr::mutate(
    pct_of_balls_faced = round(
      balls_scored_from / balls_faced * 100, 0),
    batting_team = factor(
      batting_team,
      levels = c("Australia",
                 "England",
                 "India",
                 "New Zealand",
                 "South Africa",
                 "West Indies",
                 "Sri Lanka",
                 "Pakistan",
                 "Bangladesh")))

```

```{r plot_turning_over_strike}

# Build plot
plot_turning_over_strike <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = turning_over_strike,
    ggplot2::aes(
      x = year, y = pct_of_balls_faced)) +
  ggplot2::facet_wrap(~batting_team)

# Display plot
plot_turning_over_strike

```

The more successful teams are capable of consistently scoring off ~60% of balls faced (not including runs from extras).

# Bowling performance

## Top order wickets - first 3

How quickly are the top order batters removed?

> "The most important bowling characteristic relate to how quickly the first 3 to 5 batters are dismissed." ([Bhardwaj & Dwyer, 2022](https://doi.org/10.1080/24748668.2022.2045820))

```{r wrangle_wicket_focus}

wicket_focus <- t20wc_bbb_tidy |>
  # Filter to teams that played in 3+ tournaments
  dplyr::filter(bowling_team %in% teams_in_3_plus_tournaments$value) |>
  # Count balls bowled
  dplyr::group_by(match_id, bowling_team) |>
  dplyr::mutate(
    counting_var = 1,
    balls_bowled = cumsum(counting_var)) |>
  dplyr::ungroup() |>
  dplyr::select(
    match_id, year, winner, bowling_team, innings, over, ball, balls_bowled,
    bowler, wicket, wickets_lost_yet, wicket_type, player_dismissed) |>
  dplyr::mutate(
    bowling_team = factor(
      bowling_team,
      levels = rev(c("Australia",
                 "England",
                 "India",
                 "New Zealand",
                 "South Africa",
                 "West Indies",
                 "Sri Lanka",
                 "Pakistan",
                 "Bangladesh"))))

```

```{r wrangle_top_3_wickets}

top_3_wickets <- wicket_focus |>
  dplyr::filter(wickets_lost_yet == 3 & player_dismissed != "")

```

```{r plot_top_3_wickets}

# Build plot
plot_top_3_wickets <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = top_3_wickets,
    ggplot2::aes(
      x = balls_bowled, y = bowling_team))

# Display plot
plot_top_3_wickets

```



## Top & middle order wickets - first 5

```{r wrangle_top_5_wickets}

top_5_wickets <- wicket_focus |>
  dplyr::filter(wickets_lost_yet == 5 & player_dismissed != "")

```

```{r plot_top_5_wickets}

# Build plot
plot_top_5_wickets <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = top_5_wickets,
    ggplot2::aes(
      x = balls_bowled, y = bowling_team))

# Display plot
plot_top_5_wickets

```


## Dot ball frequency

```{r wrangle_freq_dot_balls}

freq_dot_balls <- t20wc_bbb_tidy |>
  # Filter to teams that played in 3+ tournaments
  dplyr::filter(bowling_team %in% teams_in_3_plus_tournaments$value) |>
  # Count balls bowled
  dplyr::group_by(match_id, bowling_team) |>
  dplyr::mutate(
    counting_var = 1,
    balls_bowled = cumsum(counting_var),
    # Identify dot balls - no runs scored by any method
    flag_dot_balls = dplyr::case_when(
      runs_off_bat == 0 & extras == 0 ~ 1,
      TRUE                            ~ 0)) |>
  # Count dot balls
  dplyr::summarise(
    balls_bowled = max(balls_bowled),
    dot_balls_count = sum(flag_dot_balls),
    .groups = "drop") |>
  dplyr::mutate(
    pct_of_balls_bowled = round(
      dot_balls_count / balls_bowled * 100, 0),
    bowling_team = factor(
      bowling_team,
      levels = rev(c("Australia",
                 "England",
                 "India",
                 "New Zealand",
                 "South Africa",
                 "West Indies",
                 "Sri Lanka",
                 "Pakistan",
                 "Bangladesh"))))

```

```{r plot_freq_dot_balls}

# Build plot
plot_freq_dot_balls <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = freq_dot_balls,
    ggplot2::aes(
      x = pct_of_balls_bowled, y = bowling_team))

# Display plot
plot_freq_dot_balls

```


## Limiting runs conceded from extras

```{r wrangle_extras_conceded}

extras_conceded <- t20wc_bbb_tidy |>
  # Filter to teams that played in 3+ tournaments
  dplyr::filter(bowling_team %in% teams_in_3_plus_tournaments$value) |>
  dplyr::mutate(
    innings_total = dplyr::case_when(
      innings == 1 ~ innings1_total,
      innings == 2 ~ innings2_total)) |>
  # Count balls bowled
  dplyr::group_by(match_id, bowling_team) |>
  dplyr::mutate(
    counting_var = 1,
    balls_bowled = cumsum(counting_var)) |>
  dplyr::summarise(
    extras_total = sum(extras),
    innings_total = max(innings_total),
    .groups = "drop") |>
  dplyr::mutate(
    pct_of_innings_total = round(
      extras_total / innings_total * 100, 1),
    bowling_team = factor(
      bowling_team,
      levels = rev(c("Australia",
                 "England",
                 "India",
                 "New Zealand",
                 "South Africa",
                 "West Indies",
                 "Sri Lanka",
                 "Pakistan",
                 "Bangladesh"))))

```

```{r plot_extras_conceded}

# Build plot
plot_extras_conceded <- ggplot2::ggplot() +
  ggplot2::geom_boxplot(
    data = extras_conceded,
    ggplot2::aes(
      x = pct_of_innings_total, y = bowling_team))

# Display plot
plot_extras_conceded

```

**JT TO DO:** Split by wins and losses?

## Performance modelling

Logistic regression - W/L

- Relative difference in international experience (T20I games played)
- Runs scored from boundaries
- % of innings total scored from boundaries
- Balls scored from as % of balls faced (excluding extras)
- Balls taken to dismiss the top 3 batters
- Dot balls as % of balls bowled

## Gaps in data

Fielding data availability and range of metrics

Hawkeye data limited for women's matches

## Extending the analysis

- Strategic / campaign insights - tour timing and frequency, scheduling, familiarity with venue and surfaces, personnel changes (coaches / staff)
- Deeper analysis of key opposition, using data from T20 internationals in addition to T20 World Cups / Comm Games (e.g., England, India, South Africa, New Zealand)
- Data from Sportradar and possibly Hawkeye data if available for women's matches
- Relevance of professional T20 leagues? Australia (WBBL), England (The Hundred), India (WPL), New Zealand (Super Smash)

## Notes dump

Descriptive analysis: Progression of standard metrics over multiple tournaments

- Innings total when setting vs. chasing (wins and losses)
- Batting averages
- Batting strike rates
- Boundary scoring rate

Batting drill down

- Batting anchor: "Build around Beth Mooney"
- Building pressure with the bat:
     - Capability to accelerate strike rate
     - Turning over the strike
     - Distribution of shots in different parts of the ground
- Variety of contributors with bat and ball (minimising dependence on "star" players)

Bowling pressure:

- Wickets taken
- Bowling strike rates
- Extras bowled
- Modes of dismissal
- Spread of bowlers used
- Dot balls, wickets, partnership bowling, variety
     - Fielding / modes of dismissal
     - Wickets in key phases (early innings Power Play, late innings / "death" overs?)

Team make-up

- Depth chart: Age distribution, international experience, World Cup experience / tournament continuity
- All-rounders: Number selected and output with bat and ball
- Stability of playing XI